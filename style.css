/* Faccio un reset di margini e pagging cambio il box-sizing in border-box */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}


/* Osservo il layout e creo le regole css per gli elementi di base e che si ripetono */
body {
  background-color: #070514;
  color: #ffffff;
  font-family: 'Work Sans', sans-serif;
  font-size: 100%; /* E' una buona pratica indicare al browser di fare riferimento alla font di default di 16px */
}

/* Lascio un po' di spazio inferiore in tutte le intestazioni */
h1, h2, h3 {
  margin-bottom: 48px;
}

h1 {
  font-size: 96px;
  font-weight: 600;
  line-height: 113px;
}

/* RESPONSIVE */
@media screen and (max-width: 576px) {
  h1 {
    font-size: 48px;
    line-height: 56px;
  }
}

h2 {
  font-size: 64px;
  font-weight: 600;
  line-height: 75px;
  text-transform: uppercase;
}

/* RESPONSIVE */
@media screen and (max-width: 576px) {
  h2 {
    font-size: 32px;
    line-height: 37px;
  }
}

h3 {
  font-size: 48px;
  font-weight: normal;
  line-height: 56px;
}

/* RESPONSIVE */
@media screen and (max-width: 576px) {
  h3 {
    font-size: 24px;
    line-height: 28px;
  }
}

a {
  font-size: 36px;
  font-weight: 600;
  line-height: 42px;
  color: #ffffff;
  text-decoration: none;
  text-transform: uppercase;
}

a:hover {
  color: #beda10;
}

/* RESPONSIVE */
@media screen and (max-width: 576px) {
  a {
    font-size: 16px;
    line-height: 19px;
  }
}

p {
  font-size: 24px;
  margin-bottom: 16px;
}

/* RESPONSIVE */
@media screen and (mac-width: 576px) {
  p {
    font-size: 16px;
    line-height: 19px;
  }
}

/* Creo una regola css che vada bene per bottoni ma anche per link che abbiano l'aspetto di un bottone */
.button {
  background-color: #8279bb;
  color: #ffffff;
  font-size: 18px;
  font-weight: 600;
  text-transform: uppercase;
  padding: 12px 24px;
  border: none; /* Faccio il reset del bordo incluso di default nel tag button */
  border-radius: 36px;
}

.button:hover {
  background-color: #beda10;
  color: #070514;
}

.input-label {
  font-size: 24px;
  font-weight: 600;
  text-transform: uppercase;
}

.input-label span {
  font-size: 18px;
  font-weight: 400;
}

.input-field,
.input-textarea {
  font-family: 'Work Sans', sans-serif;
  font-size: 18px;
  color: #757575;
  background-color: #0e0062;
  padding: 12px 16px;
  width: 100%;
  border: none;
  border-radius: 30px;
  margin-top: 8px;
  margin-bottom: 16px;
}

.input-textarea {
  height: 100px;
  resize: none;
}

/* Creo un elemento contenitore centrato ma che comuqnue non sfori una determinata larghezza */
.container {
  width: 80%;
  margin-left: auto;
  margin-right: auto;
  max-width: 1140px;
  border: 2px solid red;
}

/* Diamo un po' di spazio tra le varie section altrimenti risulterebbero attaccate tra loro, se tolgo questo padding ad esempio la section che contiene i tag risulterà attaccata a quella hero */
section {
   padding-top: 64px;
   padding-bottom: 64px;
}

/* Do alla section un altezza uguale come tutto lo schermo del dispositivo utilizzato, applico inoltre un gradiente servendomi del sito cssgradient.io */
.hero {
  height: 100vh; /* Faccio in modo che la section occupi tutta la superficie del viewport */
  background: linear-gradient(0deg, rgba(7,5,20,1) 0%, rgba(15,25,93 ,1) 31%);
  border: 3px solid yellow;
}

/* Questa seconda classe riferita al container la creo per centrare il contenuto nello stesso */
/* Faccio in modo che il container abbia la stessa altezza della section e inoltre predispongo le regole flexbox per centrarne il contenuto verticalmente */
.hero-content {
  height: 100%; /* Il container eredita l'altezza della section */
  display: flex;
  flex-direction: column;
  justify-content: center;
}

/* Questa proprietà mi consente di allineare "solamente" il link alla destra del contenitore */
.hero-cta {
  align-self: flex-end;
}

.header {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%; /* Voglio che la larghezza sia il 100% del viewport */
  background: linear-gradient(0deg, rgba(0,0,0,0) 0%, rgb(9,2,49) 100%);
  z-index: 5;
  /* border: 3px solid yellow; */

}

.header-content {
  display: flex; /* Serve per allineare il logo al menu, anche questo come di default lo allinea in orizzontale e ci va bene così */
  flex-wrap: wrap; /* RESPONSIVE serve per mandare a capo gli elementi inq uesto caso il menu qualora non ci fosse sufficiente spazio */
}

.logo {
  font-size: 32px;
  font-weight: 600;
  line-height: 42px;
  text-transform: uppercase;
  margin-right: 64px;
}

@media screen and (max-width: 576px) {
  .logo {
    line-height: 30px;
    margin-top: 16px;
    margin-bottom: 24px;
  }
}

.menu ul {
  list-style-type: none; /* Rimuovo i puntini dall'elenco */
  display: flex; /* allinea gli elementi del menu in orizzontale da defaul, ossia works e contacts */
}

.menu ul li {
  margin-right: 24px;
}

.menu ul li a {
  font-size: 24px;
}

.works-menu {
  position: sticky;
  top: -15px;
}

/* RESPONSIVE */
@media screen and (max-width: 768px) {
  .works-menu {
    display: none;
  }
}

.works-menu ul {
  list-style-type: none;
  display: flex;
}

.works-menu ul li {
  margin-right: 24px;
}

.works {

}

.works-item {
  margin-bottom: 96px;
}

.works-item-tags {
  font-size: 24px;
  color: #beda10;
}

.work-info {
  display: flex; /* Allinea About con il testo relativo in orizzontale come da default */
  flex-wrap: wrap;
}

.work-info-label {
  width: 200px; /* !!!ATTENZIONE LUI SETTA 200px MA IO PER DISTANZIARE LA LABEL DAL TESTO NE HO BISOGNO DI 800!!!Do una larghezza fissa al container che contiene la label e rendo fluido successivamente il container che contiene il testo relativo */
  /* RISOLTO: settando successivamente la width del 70% alla colonna del contenuto adiacente alla colonna della label si è risolto tutto ea desso funziona anche con 200px come va video */
  flex-grow: 0; /* Voglio che il container della label ossia About non si ingradisca ma piuttosto rimanga fissa */
  flex-shrink: 1; /* Mi riservo la facoltà che tuttavia il suddetto container possa eventualmente dimuinuire */
  font-weight: 600;
  text-transform: uppercase;
}

/* Voglio che la colonna del testo relativo alla label sia fluido quindi setto una larghezza in percentuale ed inoltre che possa crescere insieme a tutto il resto e che a sua volta possa anche diminuire  */
.work-info-content {
  width: 70%;
  flex-grow: 1;
  flex-shrink: 1;
}

.images {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.images img {
  margin-bottom: 36px;
  max-width: 100% /* RESPONSIVE le immagini non dovranno mai superare la larghezza del container padre */
}


.image-right {
  align-self: flex-end;
}

.image-left {
  align-self: flex-start;
}

.contacts {}

.contacts-content {
  display: flex;
  justify-content: space-between;
}

.contacts-about,
.contacts-form {
  width: 40%;
  flex-grow: 0;
  flex-shrink: 1;
}

@media screen and (max-width: 768px) {
  .contacts-content {
    flex-direction: column;
  }

  .contacts-about,
  .contacts-form {
    width: 100%;
  }

  .contacts-about {
    margin-bottom: 64px;
  }
}

.footer {
  background: linear-gradient(180deg, rgba(7,5,20,1) 0%, rgba(14,0,98 ,1) 100%);
  padding-top: 24px;
  padding-bottom: 24px;
}

.copyright {
  color: #757575;
}

/* position hack */
.position-anchors {
  visibility: hidden;
  position: relative;
  top: -150px;
}

.back-to-top {
  background-image: url("img/up-arrow4.png");

  background-repeat: no-repeat;
  background-position: center center;
  background-color: #8279bb;
  border-radius: 50%;
  height: 50px;
  width: 50px;
  position: fixed;
  bottom: 30px;
  right: 30px;
  cursor: pointer;
  display: none;
}
